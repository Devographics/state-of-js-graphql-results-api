locale: en-US
namespace: js
translations:
    ###########################################################################
    # General
    ###########################################################################

    - key: general.survey_intro_js2019
      t: >
          The JavaScript world could use a bit of classification.


          Since 2016, this survey has collected 
          data from over 20,000 developers each year to identify current and upcoming trends.


          Take the survey and help us find out which libraries developers 
          want to learn next, which have the best satisfaction ratings, and much more.
      t: >
          The JavaScript world could use a bit of classification.


          Since 2016, this survey has collected 
          data from over 20,000 developers each year to identify current and upcoming trends.


          Take the survey and help us find out which libraries developers 
          want to learn next, which have the best satisfaction ratings, and much more.

    ###########################################################################
    # Sections
    ###########################################################################

    - key: sections.syntax.title
      t: Syntax
      t: Syntax
    - key: sections.syntax.description
      t: The grammar of JavaScript.
      t: The grammar of JavaScript.

    - key: sections.language.title
      t: Language
      t: Language
    - key: sections.language.description
      t: The vocabulary of JavaScript.
      t: The vocabulary of JavaScript.

    - key: sections.data_structures.title
      t: Data Structures
      t: Data Structures
    - key: sections.data_structures.description
      t: How you store and manipulate data.
      t: How you store and manipulate data.

    - key: sections.browser_apis.title
      t: Browser APIs
      t: Browser APIs
    - key: sections.browser_apis.description
      t: The features provided by the browser.
      t: The features provided by the browser.

    - key: sections.other_features.title
      t: Other Features
      t: Other Features
    - key: sections.other_features.description
      t: Other technologies and patterns
      t: Other technologies and patterns

    - key: sections.patterns.title
      t: Patterns
      t: Patterns
    - key: sections.patterns.description
      t: How you prefer writing code
      t: How you prefer writing code

    - key: sections.javascript_flavors.title
      t: JavaScript Flavors
      t: JavaScript Flavors
    - key: sections.javascript_flavors.description
      t: Languages that compile to JavaScript
      t: Languages that compile to JavaScript

    - key: sections.front_end_frameworks.title
      t: Front-end Frameworks
      t: Front-end Frameworks
    - key: sections.front_end_frameworks.description
      t: Front-end frameworks and libraries
      t: Front-end frameworks and libraries

    - key: sections.datalayer.title
      t: Data Layer
      t: Data Layer
    - key: sections.datalayer.description
      t: Loading and managing data in your app
      t: Loading and managing data in your app

    - key: sections.back_end_frameworks.title
      t: Back-end Frameworks
      t: Back-end Frameworks
    - key: sections.back_end_frameworks.description
      t: JavaScript on the server
      t: JavaScript on the server

    - key: sections.testing.title
      t: Testing
      t: Testing
    - key: sections.testing.description
      t: Tools for testing your code
      t: Tools for testing your code

    - key: sections.mobile_desktop.title
      t: Mobile & Desktop
      t: Mobile & Desktop
    - key: sections.mobile_desktop.description
      t: JavaScript for mobile devices and desktop apps
      t: JavaScript for mobile devices and desktop apps

    - key: sections.build_tools.title
      t: Build Tools
      t: Build Tools
    - key: sections.build_tools.description
      t: Compiling & bundling code
      t: Compiling & bundling code

    ###########################################################################
    # Options
    ###########################################################################

    ###########################################################################
    # Features
    ###########################################################################

    # syntax
    - key: features.destructuring
      t: Destructuring
      t: Destructuring
    - key: features.destructuring.description
      t: 'Example: `const { foo } = bar`'
      t: 'Example: `const { foo } = bar`'
    - key: features.spread_operator
      t: Spread operator
      t: Spread operator
    - key: features.spread_operator.description
      t: 'Example: `[...array1, ...array2]`'
      t: 'Example: `[...array1, ...array2]`'
    - key: features.arrow_functions
      t: Arrow Functions
      t: Arrow Functions
    - key: features.arrow_functions.description
      t: 'Example: `const foo = () => {}`'
      t: 'Example: `const foo = () => {}`'
    - key: features.nullish_coalescing
      t: Nullish Coalescing
      t: Nullish Coalescing
    - key: features.nullish_coalescing.description
      t: >
        Example: `const foo = 0 ?? 42`
      t: >
        Example: `const foo = 0 ?? 42`
    - key: features.optional_chaining
      t: Optional Chaining
      t: Optional Chaining
    - key: features.optional_chaining.description
      t: >
        Example: `const dogName = adventurer.dog?.name`
      t: >
        Example: `const dogName = adventurer.dog?.name`
    - key: features.private_fields
      t: Private Fields
      t: Private Fields
    - key: features.private_fields.description
      t: >
        Example: `class ClassWithPrivateField { #privateField }`
      t: >
        Example: `class ClassWithPrivateField { #privateField }`

    # language
    - key: features.proxies
      t: Proxies
      t: Proxies
    - key: features.async_await
      t: Async/Await
      t: Async/Await
    - key: features.promises
      t: Promises
      t: Promises
    - key: features.decorators
      t: Decorators
      t: Decorators
    - key: features.decorators.description
      t: >
          In its simplest form, a decorator is simply a way of 
          wrapping one piece of code with another — literally “decorating” it.
      t: >
          In its simplest form, a decorator is simply a way of 
          wrapping one piece of code with another — literally “decorating” it.
    - key: features.dynamic_import
      t: Dynamic Import
      t: Dynamic Import
    - key: features.dynamic_import.description
      t: >
        Example: <code>await import('/modules/my-module.js')</code>
      t: >
        Example: <code>await import('/modules/my-module.js')</code>

    # data structures
    - key: features.maps
      t: Maps
      t: Maps
    - key: features.sets
      t: Sets
      t: Sets
    - key: features.typed_arrays
      t: Typed Arrays
      t: Typed Arrays
    - key: array_prototype_flat
      t: Array.prototype.flat
      t: Array.prototype.flat

    # browser apis
    - key: features.service_workers
      t: Service Workers
      t: Service Workers
    - key: features.local_storage
      t: LocalStorage
      t: LocalStorage
    - key: features.i18n
      t: i18n
      t: i18n
    - key: features.web_components
      t: Web Components
      t: Web Components
    - key: features.web_audio
      t: Web Audio API
      t: Web Audio API
    - key: features.webgl
      t: WebGL
      t: WebGL
    - key: features.web_animations
      t: Web Animations API
      t: Web Animations API
    - key: features.webrtc
      t: WebRTC
      t: WebRTC
    - key: features.web_speech
      t: Web Speech API
      t: Web Speech API
    - key: features.webvr
      t: WebVR
      t: WebVR
    - key: features.websocket
      t: Websocket
      t: Websocket
    - key: features.fetch
      t: Fetch API
      t: Fetch API

    # other features
    - key: features.pwa
      t: Progressive Web Apps (PWA)
      t: Progressive Web Apps (PWA)
    - key: features.wasm
      t: WebAssembly (WASM)
      t: WebAssembly (WASM)

    # patterns
    - key: patterns.object_oriented_programming
      t: Object-Oriented Programming
      t: Object-Oriented Programming
    - key: features.functional_programming
      t: Functional Programming
      t: Functional Programming
    - key: features.reactive_programming
      t: Reactive Programming
      t: Reactive Programming

    ###########################################################################
    # Tools
    ###########################################################################

    - key: tools.angular.description
      t: >
        Note that this question only targets [Angular](https://angular.io/) experience,
        and specifically does *not* apply to the deprecated [AngularJS](https://angularjs.org/).
      t: >
        Note that this question only targets [Angular](https://angular.io/) experience,
        and specifically does *not* apply to the deprecated [AngularJS](https://angularjs.org/).
   
    ###########################################################################
    # Other Tools
    ###########################################################################

    - key: tools_others.runtimes
      t: JavaScript Runtimes
      t: JavaScript Runtimes
    - key: tools_others.runtimes.description
      t: Which engines/runtimes/execution environments do you regularly use?
      t: Which engines/runtimes/execution environments do you regularly use?
    - key: tools_others.runtimes.others
      t: Other Runtimes
      t: Other Runtimes
    - key: tools_others.runtimes.others.description
      t: Other answers (freeform field).
      t: Other answers (freeform field).

    - key: tools_others.package_registries
      t: Package Registries
      t: Package Registries
    - key: tools_others.package_registries.description
      t: Which package registries do you regularly fetch packages from?
      t: Which package registries do you regularly fetch packages from?
    - key: tools_others.package_registries.others
      t: Other Package Registries
      t: Other Package Registries
    - key: tools_others.package_registries.others.description
      t: Other answers (freeform field).
      t: Other answers (freeform field).

    ###########################################################################
    # Opinions
    ###########################################################################

    - key: opinions.js_moving_in_right_direction
      t: JavaScript is moving in the right direction
      t: JavaScript is moving in the right direction

    - key: opinions.building_js_apps_overly_complex
      t: Building JavaScript apps is overly complex right now
      t: Building JavaScript apps is overly complex right now

    - key: opinions.js_over_used_online
      t: JavaScript is over-used online
      t: JavaScript is over-used online

    - key: opinions.enjoy_building_js_apps
      t: I enjoy building JavaScript apps
      t: I enjoy building JavaScript apps

    - key: opinions.would_like_js_to_be_main_lang
      t: I would like JavaScript to be my main programming language
      t: I would like JavaScript to be my main programming language

    - key: opinions.js_ecosystem_changing_to_fast
      t: The JavaScript ecosystem is changing too fast
      t: The JavaScript ecosystem is changing too fast

    - key: opinions_others.missing_from_js.others
      t: What do you feel is currently missing from JavaScript?
      t: What do you feel is currently missing from JavaScript?
    - key: opinions_others.missing_from_js.others.description
      t: Features you'd like to see in JavaScript one day.
      t: Features you'd like to see in JavaScript one day.

    - key: happiness.state_of_the_web
      t: How happy are you with the general state of web technologies?
      t: How happy are you with the general state of web technologies?

    - key: happiness.state_of_js
      t: How happy are you with the general state of JavaScript?
      t: How happy are you with the general state of JavaScript?
